# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer(
    "Deferred when true."
    if: Boolean,
    "If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to."
    label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream(
    "Streamed when true."
    if: Boolean,
    "The initial elements that shall be send down to the consumer."
    initialCount: Int! = 0,
    "If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to."
    label: String
) on FIELD

directive @authorize(
    "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field."
    apply: ApplyPolicy! = BEFORE_RESOLVER,
    "The name of the authorization policy that determines access to the annotated resource."
    policy: String,
    "Roles that are allowed to access the annotated resource."
    roles: [String!]
) on SCHEMA | OBJECT | FIELD_DEFINITION

interface GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float]
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type Attribute {
    description: String
    icon: String!
    id: Int!
    name: String!
}

type AuthTokenPayload {
    errors: [UserError!]!
    token: String
}

type ConfirmationPayload {
    errors: [UserError!]!
}

type Currency {
    code: String!
    dollarRatio: Float!
    id: ID!
}

type GeoJSONLineStringType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field is an array of two or more positions."
    coordinates: [Position]
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type GeoJSONMultiLineStringType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field is an array of LineString coordinate arrays."
    coordinates: [Position]
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type GeoJSONMultiPointType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field is an array of positions."
    coordinates: [Position]
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type GeoJSONMultiPolygonType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field is an array of Polygon coordinate arrays."
    coordinates: Coordinates
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type GeoJSONPointType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field is a single position."
    coordinates: Position
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type GeoJSONPolygonType implements GeoJSONInterface {
    "The minimum bounding box around the geometry object"
    bbox: [Float!]!
    "The \"coordinates\" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface."
    coordinates: [[Position]]
    "The coordinate reference system integer identifier"
    crs: Int!
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType!
}

type Group {
    id: ID!
    name: String!
    users: [User]
}

type GroupInvitationPayload {
    errors: [UserError!]!
    token: String
}

type GroupPayload {
    errors: [UserError!]!
    group: Group
}

type Mutation {
    emailSignIn(input: EmailSignInInputTypeInput!): AuthTokenPayload!
    emailSignUp(input: EmailSignUpInputTypeInput!): Boolean!
    googleSignIn(idToken: String!): String!
    groupCreate(input: GroupCreateInputTypeInput!): GroupPayload!
    groupExpelUser(input: GroupUserExpelInputTypeInput!): GroupPayload!
    groupInvite(groupId: ID!): GroupInvitationPayload!
    groupJoin(token: String!): GroupPayload!
    groupLeave(groupId: ID!): ConfirmationPayload!
    groupUpdate(input: GroupUpdateInputTypeInput!): GroupPayload!
    manageMyFavorite(isMyFavorite: Boolean!, saunaId: ID!): SaunaPayloadType!
    photosCleaner: ConfirmationPayload!
    report(input: ReportInput!): ConfirmationPayload!
    scrapeNominatim: ConfirmationPayload!
    scrapePhotos: ConfirmationPayload!
    scrapePlaceDetails: ConfirmationPayload!
    scrapeSearchForPlaces: ConfirmationPayload!
    shortLivedToken: AuthTokenPayload!
    visitHistoryCreate(input: VisitHistoryCreateInput!): VisitHistoryPayload!
    visitHistoryUpdate(input: VisitHistoryUpdateInput!): VisitHistoryPayload!
}

"A connection to a list of items."
type MyVisitsConnection {
    "A list of edges."
    edges: [MyVisitsEdge!]
    "A flattened list of the nodes."
    nodes: [VisitHistory!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type MyVisitsEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: VisitHistory!
}

type OpeningHour {
    close: TimeSpan!
    dayOfWeek: DayOfWeek!
    id: ID!
    open: TimeSpan!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "Indicates whether more edges exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more edges exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Picture {
    fullSizeUrl: String!
    id: ID!
    thumbnailUrl: String!
}

"A connection to a list of items."
type PicturesConnection {
    "A list of edges."
    edges: [PicturesEdge!]
    "A flattened list of the nodes."
    nodes: [Picture]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type PicturesEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Picture
}

type Price {
    currency: Currency!
    id: ID!
    label: String!
    value: Decimal!
}

type Query {
    me: User!
    myVisits(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): MyVisitsConnection
    saunaDetail(id: ID!): Sauna
    saunaList(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int,
        where: SaunaFilterInput
    ): SaunaListConnection
}

type Sauna {
    address: String
    attributes: [Attribute!]!
    content: String
    email: String
    id: ID!
    isMyFavorite: Boolean!
    isPrivate: Boolean!
    leadParagraph: String
    location: GeoJSONPointType!
    name: String!
    openingHourOverrides: [OpeningHour!]!
    openingHours: [OpeningHour!]!
    phone: String
    pictures(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first _n_ elements from the list."
        first: Int,
        "Returns the last _n_ elements from the list."
        last: Int
    ): PicturesConnection
    prices: [Price!]!
    url: String
}

"A connection to a list of items."
type SaunaListConnection {
    "A list of edges."
    edges: [SaunaListEdge!]
    "A flattened list of the nodes."
    nodes: [Sauna!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type SaunaListEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Sauna!
}

type SaunaPayloadType {
    errors: [UserError!]!
    sauna: Sauna
}

type User {
    avatarUrl: String
    email: String!
    id: ID!
    name: String
}

type UserError {
    code: String!
    message: String
}

type VisitHistory {
    cycles: Int!
    duration: Int!
    id: ID!
    note: String
    rating: Int
    review: String
    sauna: Sauna!
    visitedAt: DateTime!
}

type VisitHistoryPayload {
    errors: [UserError!]!
    visitHistory: VisitHistory
}

enum ApplyPolicy {
    AFTER_RESOLVER
    BEFORE_RESOLVER
}

enum DayOfWeek {
    FRIDAY
    MONDAY
    SATURDAY
    SUNDAY
    THURSDAY
    TUESDAY
    WEDNESDAY
}

enum GeoJSONGeometryType {
    GeometryCollection
    LineString
    MultiLineString
    MultiPoint
    MultiPolygon
    Point
    Polygon
}

"A coordinate is an array of positions."
scalar Coordinates

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

scalar Geometry

"A position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or easting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
scalar Position

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

"The `Upload` scalar type represents a file upload."
scalar Upload

input EmailSignInInputTypeInput {
    email: String!
    password: String!
}

input EmailSignUpInputTypeInput {
    email: String!
    name: String!
    password: String!
}

input GeoJSONLineStringInput {
    "The \"coordinates\" field is an array of two or more positions."
    coordinates: [Position]
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GeoJSONMultiLineStringInput {
    "The \"coordinates\" field is an array of LineString coordinate arrays."
    coordinates: [[Position]]
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GeoJSONMultiPointInput {
    "The \"coordinates\" field is an array of positions."
    coordinates: [Position]
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GeoJSONMultiPolygonInput {
    "The \"coordinates\" field is an array of Polygon coordinate arrays."
    coordinates: Coordinates
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GeoJSONPointInput {
    "The \"coordinates\" field is a single position."
    coordinates: Position
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GeoJSONPolygonInput {
    "The \"coordinates\" field MUST be an array of linear ring coordinate arrays. For Polygons with more than one of these rings, the first MUST be the exterior ring, and any others MUST be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface."
    coordinates: [[Position]]
    "The coordinate reference system integer identifier"
    crs: Int
    "The geometry type of the GeoJson object"
    type: GeoJSONGeometryType
}

input GroupCreateInputTypeInput {
    name: String!
}

input GroupUpdateInputTypeInput {
    groupId: ID!
    name: String
}

input GroupUserExpelInputTypeInput {
    groupId: ID!
    userId: ID!
}

input PositionInput {
    lat: Float!
    lon: Float!
}

input ReportInput {
    message: String!
    reportType: String!
    subjectId: Int!
    subjectName: String!
}

input SaunaFilterInput {
    fulltext: String
    position: PositionInput
}

input VisitHistoryCreateInput {
    cycles: Int!
    duration: Int!
    note: String
    rating: Int
    review: String
    saunaId: ID!
    visitedAt: DateTime!
}

input VisitHistoryUpdateInput {
    cycles: Int
    duration: Int
    note: String
    rating: Int
    review: String
    visitId: Int!
    visitedAt: DateTime
}
