// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SaunatonttuAPI;
using SaunatonttuAPI.Sauna.Entity;

#nullable disable

namespace SaunatonttuAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230121105440_v3")]
    partial class v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "sauna_user_kind", new[] { "owner", "staff", "guest" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SaunatonttuAPI.OpeningHours.Entity.OpeningHourDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id")
                        .HasName("pk_opening_hour_detail");

                    b.ToTable("opening_hour_detail", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.OpeningHours.Entity.OpeningHourPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CloseId")
                        .HasColumnType("integer")
                        .HasColumnName("close_id");

                    b.Property<int>("OpenId")
                        .HasColumnType("integer")
                        .HasColumnName("open_id");

                    b.Property<int>("SaunaId")
                        .HasColumnType("integer")
                        .HasColumnName("sauna_id");

                    b.HasKey("Id")
                        .HasName("pk_opening_hours_period");

                    b.HasIndex("CloseId")
                        .HasDatabaseName("ix_opening_hours_period_close_id");

                    b.HasIndex("OpenId")
                        .HasDatabaseName("ix_opening_hours_period_open_id");

                    b.HasIndex("SaunaId")
                        .HasDatabaseName("ix_opening_hours_period_sauna_id");

                    b.ToTable("opening_hours_period", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.OpeningHours.Entity.SpecialDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("SaunaId")
                        .HasColumnType("integer")
                        .HasColumnName("sauna_id");

                    b.HasKey("Id")
                        .HasName("pk_special_day");

                    b.HasIndex("SaunaId")
                        .HasDatabaseName("ix_special_day_sauna_id");

                    b.ToTable("special_day", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.Picture.Entity.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullSizeUrl")
                        .IsRequired()
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnName("full_size_url");

                    b.Property<int>("SaunaId")
                        .HasColumnType("integer")
                        .HasColumnName("sauna_id");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnName("thumbnail_url");

                    b.HasKey("Id")
                        .HasName("pk_picture");

                    b.HasIndex("SaunaId")
                        .HasDatabaseName("ix_picture_sauna_id");

                    b.ToTable("picture", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.Price.Entity.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<decimal>("DollarRatio")
                        .HasColumnType("money")
                        .HasColumnName("dollar_ratio");

                    b.HasKey("Id")
                        .HasName("pk_currency");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.Price.Entity.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("SaunaId")
                        .HasColumnType("integer")
                        .HasColumnName("sauna_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("money")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_price");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_price_currency_id");

                    b.HasIndex("SaunaId")
                        .HasDatabaseName("ix_price_sauna_id");

                    b.ToTable("price", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.Sauna.Entity.Sauna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("LeadParagraph")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lead_paragraph");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_sauna");

                    b.ToTable("sauna", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.Sauna.Entity.SaunaUser", b =>
                {
                    b.Property<int>("SaunaId")
                        .HasColumnType("integer")
                        .HasColumnName("sauna_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<SaunaUserKind>("Kind")
                        .HasColumnType("sauna_user_kind")
                        .HasColumnName("kind");

                    b.HasKey("SaunaId", "UserId")
                        .HasName("pk_sauna_user");

                    b.HasIndex("SaunaId")
                        .IsUnique()
                        .HasDatabaseName("ix_sauna_user_sauna_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sauna_user_user_id");

                    b.ToTable("sauna_user", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.User.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SaunatonttuAPI.OpeningHours.Entity.OpeningHourPeriod", b =>
                {
                    b.HasOne("SaunatonttuAPI.OpeningHours.Entity.OpeningHourDetail", "Close")
                        .WithMany()
                        .HasForeignKey("CloseId")
                        .HasConstraintName("fk_opening_hours_period_opening_hour_detail_close_id");

                    b.HasOne("SaunatonttuAPI.OpeningHours.Entity.OpeningHourDetail", "Open")
                        .WithMany()
                        .HasForeignKey("OpenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_opening_hours_period_opening_hour_detail_open_id");

                    b.HasOne("SaunatonttuAPI.Sauna.Entity.Sauna", "Sauna")
                        .WithMany("OpeningHourPeriods")
                        .HasForeignKey("SaunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_opening_hours_period_sauna_sauna_id");

                    b.Navigation("Close");

                    b.Navigation("Open");

                    b.Navigation("Sauna");
                });

            modelBuilder.Entity("SaunatonttuAPI.OpeningHours.Entity.SpecialDay", b =>
                {
                    b.HasOne("SaunatonttuAPI.Sauna.Entity.Sauna", "Sauna")
                        .WithMany("OpeningSpecialDays")
                        .HasForeignKey("SaunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_day_sauna_sauna_id");

                    b.Navigation("Sauna");
                });

            modelBuilder.Entity("SaunatonttuAPI.Picture.Entity.Picture", b =>
                {
                    b.HasOne("SaunatonttuAPI.Sauna.Entity.Sauna", "Sauna")
                        .WithMany("Pictures")
                        .HasForeignKey("SaunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_picture_sauna_sauna_id");

                    b.Navigation("Sauna");
                });

            modelBuilder.Entity("SaunatonttuAPI.Price.Entity.Price", b =>
                {
                    b.HasOne("SaunatonttuAPI.Price.Entity.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_currency_currency_id");

                    b.HasOne("SaunatonttuAPI.Sauna.Entity.Sauna", "Sauna")
                        .WithMany("Prices")
                        .HasForeignKey("SaunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_sauna_sauna_id");

                    b.Navigation("Currency");

                    b.Navigation("Sauna");
                });

            modelBuilder.Entity("SaunatonttuAPI.Sauna.Entity.SaunaUser", b =>
                {
                    b.HasOne("SaunatonttuAPI.Sauna.Entity.Sauna", "Sauna")
                        .WithOne("Users")
                        .HasForeignKey("SaunatonttuAPI.Sauna.Entity.SaunaUser", "SaunaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sauna_user_sauna_sauna_id");

                    b.HasOne("SaunatonttuAPI.User.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sauna_user_user_user_id");

                    b.Navigation("Sauna");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SaunatonttuAPI.Sauna.Entity.Sauna", b =>
                {
                    b.Navigation("OpeningHourPeriods");

                    b.Navigation("OpeningSpecialDays");

                    b.Navigation("Pictures");

                    b.Navigation("Prices");

                    b.Navigation("Users")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
